
It's the Energizer TODO list: It keeps growing, and growing, and growing...

I use this file as a place for reminders and ideas, some entries will never make it, some will sit here and fester until
I get inspired :P

Standard Addons:
----------------

* Write tests that exercise most, if not all, of the standard templates.
* Make a set of tileset mapping addons at least equivalent to what Rubble 6 had.
* Fix `User/Powered/Clothier` so you can make clothing for non-main races.
	* I have already done some preliminary work to the create clothing function, I just need to provide a "select race"
	  UI and test the whole mess...
* Add a way to "import" an addon so that it's shared objects are available for use by other addons without actually having
  the source addon active.
	* Basically what it would do is load all the raw files from a given addon and parse them in such a way to everything
	  except the shared object data is discarded. This data is then placed in a "shared object bank" for later use by a
	  variant of `SHARED_OBJECT_DUPLICATE`.
	* This system would allow a major mod to "import" the base addon then insert objects as needed from the "bank".
	* This may be very tricky to do, but the result would be a powerful new way to reuse existing objects.
	* To make this work I will probably have to use the Rubble parser with a custom template dispatcher (so I can sandbox
	  the files that are being imported).
		* How do I decide if a template is "sandbox safe"? Anything that uses the registry is obviously unsafe, but
		  other stuff may cause problems as well...
		* This may need native support, which would raise the complexity to the point where it's probably not worth it...
* Finish writing raw consistency checker rules for all tags.


Rubble Core:
------------

* When a script error happens inside template code that is parsed from script code the error gets logged (with minor
  differences each level) several times. This can lead to extremely verbose logs.
	* This is because each level is wrapping the error again, first a script error gets wrapped by the Rubble template
	  parser, then it gets returned by the native script function that called the parser, which causes the script VM to
	  wrap it again, then it gets passed to the template parser again, and again, and again until it finally makes it
	  out and is logged.
	* Basically a fix would require Rubble to examine any script errors to see if they are wrapping Rubble errors that
	  are wrapping script errors and strip the extra levels of wrapping off.
		* At least one level of wrapping needs to be retained so that the stack trace is preserved.
		* Sadly striping extra wrapping will remove the stack traces from the upper levels, maybe it's better to keep the
		  "exploding errors".
* How hard would it be to add a syntax for "depreciated tags" in the raw consistency checker rule format?
	* Probably fairly hard, but a more generic "rule properties" system would be useful for other things too.
	* By allowing rules to have key:value properties it would be possible to tag rules with extra information that could
	  be useful for future uses of the engine. Obviously this would be useless for simple merging, but it may be useful
	  for other stuff.
* Write a "named tile" system.
	* Tilesets will supply a archetype->tile mapping file (including support for TWBT overrides if the tileset uses them).
	* Addons supply a object->archetype mapping file.
	* The two mapping files are then used to generate a raw merger source file that is applied in the same way tileset
	  files are applied now.
	* There will be hundreds of archetypes, ranging from "rock wall", to "mechanism", to "minecart" and everything in
	  between.
		* Most hardcoded items will have an archetype, as will common item, material, etc categories. Most categories
		  will have multiple variants, for example rock material tiles will have a bunch (not sure exactly how many).
		* If an archetype has variants tilesets do not have to provide tiles for them all, if one or more are missing
		  they will have fall backs defined (for example if no "decorative gem" tile is defined it will fall back to a
		  generic "gem" tile).
	* This will mostly cover tiles, colors are a whole different problem...
	* Modification of existing raws will *not* be required. All that will be needed is an object->archetype mapping file.
	* This will allow one set of tileset mappings to cover all addons. Even radical total conversions will work with any
	  tileset with no modification to either one (provided they both support this system).
	* Obviously some "helper" addons will be needed to automate generation of map file stubs. Sadly it will likely be
	  impossible to make generation of ready-to-use map files of either type automatic.
	* Provide templates for annotating objects with archetypes so that addon map files may generated from information in
	  the raws (since it will be easier to keep things up-to-date when all the information is in one place).
	* This system can be implemented as a library addon, no need to add more stuff to the Rubble core...
	* Maybe I can enlist a tileset author to make the archetype lists, I don't really know which ones would be useful or
	  not...
	* This will be a fearsome amount of work, finish all the other unfinished stuff first!
* Test AXIS 2, then integrate it with Rubble.
	* This will be a major change (all the paths will need to be redone), maybe bundle with an all new addon loader and
	  addon database and call the result "Rubble 8"?
	* I do need to do some work on the addon loader anyway, mostly stuff to allow more flexible loading of zipped addons
	  (in particular the ability to place them anywhere you want in the addon tree).
		* Rubble needs better support for loading content via unconventional means (content servers and other remote
		  sources for example). The current system works fine for addon packs, but is way too cumbersome for single addons.
		* In particular addons loaded from remote sources need to be able to also load other remote addons.
			* This would be best handled by allowing Rubble to load more addons at any time (prior to generation starting).
				* This would be a powerful ability, but would only really come into it's own with a custom content server
				  powering the back end.
			* Obviously addons should be loaded to a shared database so that Rubble does not need to waste time reloading
			  them every time a new state is needed.


Interfaces:
-----------

* A workshop editor would be nice...
	* I have basic SDL2 bindings just laying around, maybe I should use them.
	* The tile drawing code from my CMV player (which uses SDL2) could come in handy...
* Add a way to access the other modes from the web mode.
	* Basically a page where you select a mode, then fill in the command line options for that mode. The only tricky bit
	  would be options that may be specified more than once, and that could be handled with a bit of JS.


Other:
------

* Otto has the worst API for exporting native values to a script I have ever seen, I may want to rethink this...
	* The main problem is that it tries to do too much for you, there seems to be no way to, for example, tell it to
	  make a byte slice look like a string to scripts, or to only allow scripts to write to a subset of an object's keys.
	* I can't believe that there is no way to define your own interfaces for things, but if there is one it is undocumented.
		* Try to find out if there is a way, either by bugging the original developer or by seeing if I can find more
		  documentation somewhere...
	* If all else fails then either drop the idea of JS support of find a different VM (I will *not* write a JS VM).
		* I found some V8 bindings, but I think I would need a C/C++ cross compiler to build the Linux/OSX binaries if
		  I use them, and that is more trouble than it is worth.
